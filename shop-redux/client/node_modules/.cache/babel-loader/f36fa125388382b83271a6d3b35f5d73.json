{"ast":null,"code":"var _jsxFileName = \"/Users/yussefrafat/Desktop/STATETEST/shop-shop-shop-redux/client/src/components/ProductList/index.js\";\nimport React, { useEffect } from 'react'; // commented out in favor of redux logic\n//import { useStoreContext } from '../../utils/GlobalState';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\"; //import IndexDB helper which will allow the app to talk\n// to the database\n\nimport { idbPromise } from \"../../utils/helpers\"; // currentCategory props is no longer used as is part of the \n//function ProductList({ currentCategory }) {\n// global state\n\nfunction ProductList({}) {\n  // commented out in favor of redux logic\n  //const [state, dispatch] = useStoreContext();\n  const state = useSelector(state => {\n    return state;\n  });\n  const dispatch = useDispatch();\n  const {\n    currentCategory\n  } = state;\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS); //const products = data?.products || [];\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      }); // but let's also take each product and save it to IndexedDB using the helper function \n\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      idbPromise('products', 'get').then(products => {\n        // use retrieved data to set global state for offline browsing\n        console.log(\"I am offline\");\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [loading, data, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"my-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, \"Our Products:\"), state.products.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, filterProducts().map(product => /*#__PURE__*/React.createElement(ProductItem, {\n    key: product._id,\n    _id: product._id,\n    image: product.image,\n    name: product.name,\n    price: product.price,\n    quantity: product.quantity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }))) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, \"You haven't added any products yet!\"), loading ? /*#__PURE__*/React.createElement(\"img\", {\n    src: spinner,\n    alt: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }) : null);\n}\n\nexport default ProductList;","map":{"version":3,"sources":["/Users/yussefrafat/Desktop/STATETEST/shop-shop-shop-redux/client/src/components/ProductList/index.js"],"names":["React","useEffect","useDispatch","useSelector","UPDATE_PRODUCTS","useQuery","ProductItem","QUERY_PRODUCTS","spinner","idbPromise","ProductList","state","dispatch","currentCategory","loading","data","type","products","forEach","product","then","console","log","filterProducts","filter","category","_id","length","map","image","name","price","quantity"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\n// commented out in favor of redux logic\n//import { useStoreContext } from '../../utils/GlobalState';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\n\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\"\n\n//import IndexDB helper which will allow the app to talk\n// to the database\nimport { idbPromise } from \"../../utils/helpers\";\n\n// currentCategory props is no longer used as is part of the \n//function ProductList({ currentCategory }) {\n// global state\n\nfunction ProductList({}) {\n\n  // commented out in favor of redux logic\n  //const [state, dispatch] = useStoreContext();\n  const state = useSelector((state) => {\n    return state\n  });\n  const dispatch = useDispatch();\n\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  //const products = data?.products || [];\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      // but let's also take each product and save it to IndexedDB using the helper function \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        console.log(\"I am offline\")\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      })\n    }\n  }, [loading, data, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n \n\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n            {filterProducts().map(product => (\n                <ProductItem\n                  key= {product._id}\n                  _id={product._id}\n                  image={product.image}\n                  name={product.name}\n                  price={product.price}\n                  quantity={product.quantity}\n                />\n            ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      { loading ? \n      <img src={spinner} alt=\"loading\" />: null}\n    </div>\n  );\n}\n\nexport default ProductList;\n"]},"metadata":{},"sourceType":"module"}