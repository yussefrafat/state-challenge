{"ast":null,"code":"var _jsxFileName = \"/Users/yussefrafat/Desktop/STATETEST/shop-shop-shop-redux/client/src/components/Cart/index.js\";\nimport React, { useEffect } from \"react\";\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css'; //commented out in favor of redux logic\n//import { useStoreContext } from '../../utils/GlobalState';\n\nimport { useDispatch, useSelector } from 'react-redux'; // stripe checkout api\n// to be used as part of the button checkout process\n\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { QUERY_CHECKOUT } from \"../../utils/queries\"; // API key in context of REACT as testing key.\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  /*\n  You'll use the custom useStoreContext Hook to establish \n  a state variable and the dispatch() function to update\n  the state. In this case, dispatch() will call the TOGGLE_CART\n  action. In the Cart functional component, write the following code:\n  */\n  // Commented out in favor of redux logic\n  //const [state, dispatch] = useStoreContext();\n  const state = useSelector(state => {\n    return state;\n  });\n  const dispatch = useDispatch(); // using lazyQuery to be used as part of the checkout function\n\n  const [getCheckout, {\n    data\n  }] = useLazyQuery(QUERY_CHECKOUT);\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({\n        type: ADD_MULTIPLE_TO_CART,\n        products: [...cart]\n      });\n    }\n\n    ;\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]); // use effect for checkout lazyhook\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then(res => {\n        res.redirectToCheckout({\n          sessionId: data.checkout.session\n        });\n      });\n    }\n  }, [data]);\n\n  function toggleCart() {\n    dispatch({\n      type: TOGGLE_CART\n    });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  } // jsx component befor\n  //<div className=\"close\">[close]</div>\n  // after <div className=\"close\" onClick={toggleCart}>[close]</div>\n\n  /*we call the action and the resolver will give return \n          case TOGGLE_CART:\n  return {\n    ...state,\n    cartOpen: !state.cartOpen\n  };\n  */\n  // at this poit state.cartOpen is !state.cartOpen\n  // call our QUERY_CHECKOUT query\n  // handle stripe checkout\n\n\n  function submitCheckout() {\n    const productIds = [];\n    state.cart.forEach(item => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n    getCheckout({\n      variables: {\n        products: productIds\n      }\n    });\n  }\n\n  if (!state.cartOpen) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cart-closed\",\n      onClick: toggleCart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      role: \"img\",\n      \"aria-label\": \"trash\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }, \"\\uD83D\\uDED2\"));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"close\",\n    onClick: toggleCart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, \"[close]\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, \"Shopping Cart\"), state.cart.length ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, state.cart.map(item => /*#__PURE__*/React.createElement(CartItem, {\n    key: item._id,\n    item: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-row space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, \"Total: $\", calculateTotal()), Auth.loggedIn() ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: submitCheckout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 15\n    }\n  }, \"Checkout\") : /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, \"(log in to check out)\"))) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"shocked\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, \"\\uD83D\\uDE31\"), \"You haven't added anything to your cart yet!\"));\n};\n/*\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      <div>\n          <CartItem item={{name:'Camera', image:'camera.jpg', price:5, purchaseQuantity:3}} />\n          <CartItem item={{name:'Soap', image:'soap.jpg', price:6, purchaseQuantity:4}} />\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: $0</strong>\n            {\n              Auth.loggedIn() ?\n                <button>\n                  Checkout\n                </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n    </div>\n    */\n\n\nexport default Cart;","map":{"version":3,"sources":["/Users/yussefrafat/Desktop/STATETEST/shop-shop-shop-redux/client/src/components/Cart/index.js"],"names":["React","useEffect","TOGGLE_CART","ADD_MULTIPLE_TO_CART","idbPromise","CartItem","Auth","useDispatch","useSelector","loadStripe","useLazyQuery","QUERY_CHECKOUT","stripePromise","Cart","state","dispatch","getCheckout","data","getCart","cart","type","products","length","then","res","redirectToCheckout","sessionId","checkout","session","toggleCart","calculateTotal","sum","forEach","item","price","purchaseQuantity","toFixed","submitCheckout","productIds","i","push","_id","variables","cartOpen","map","loggedIn"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\n//commented out in favor of redux logic\n//import { useStoreContext } from '../../utils/GlobalState';\nimport { useDispatch, useSelector } from 'react-redux';\n// stripe checkout api\n// to be used as part of the button checkout process\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { QUERY_CHECKOUT } from \"../../utils/queries\"\n\n// API key in context of REACT as testing key.\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n\n  /*\n  You'll use the custom useStoreContext Hook to establish \n  a state variable and the dispatch() function to update\n  the state. In this case, dispatch() will call the TOGGLE_CART\n  action. In the Cart functional component, write the following code:\n  */\n\n  // Commented out in favor of redux logic\n  //const [state, dispatch] = useStoreContext();\n\n  const state = useSelector((state) => {\n    return state\n  });\n\n  const dispatch = useDispatch();\n\n  // using lazyQuery to be used as part of the checkout function\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    };\n  \n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  // use effect for checkout lazyhook\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n  \n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n    // jsx component befor\n    //<div className=\"close\">[close]</div>\n    // after <div className=\"close\" onClick={toggleCart}>[close]</div>\n\n    /*we call the action and the resolver will give return \n            case TOGGLE_CART:\n    return {\n      ...state,\n      cartOpen: !state.cartOpen\n    };\n    */\n   // at this poit state.cartOpen is !state.cartOpen\n\n   // call our QUERY_CHECKOUT query\n       // handle stripe checkout\n       function submitCheckout() {\n        const productIds = [];\n    \n        state.cart.forEach((item) => {\n          for (let i = 0; i < item.purchaseQuantity; i++) {\n            productIds.push(item._id);\n          }\n        });\n    \n        getCheckout({\n          variables: { products: productIds }\n        });\n      }\n\n    if (!state.cartOpen) {\n      return (\n        <div className=\"cart-closed\" onClick={toggleCart}>\n          <span\n            role=\"img\"\n            aria-label=\"trash\">🛒</span>\n        </div>\n      );\n    }\n    \n\n\n  return (\n\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map(item => (\n            <CartItem key={item._id} item={item} />\n          ))}\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n            {\n              Auth.loggedIn() ?\n              <button onClick={submitCheckout}>\n              Checkout\n             </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n\n  );\n};\n\n/*\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      <div>\n          <CartItem item={{name:'Camera', image:'camera.jpg', price:5, purchaseQuantity:3}} />\n          <CartItem item={{name:'Soap', image:'soap.jpg', price:6, purchaseQuantity:4}} />\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: $0</strong>\n            {\n              Auth.loggedIn() ?\n                <button>\n                  Checkout\n                </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n    </div>\n    */\n\nexport default Cart;"]},"metadata":{},"sourceType":"module"}