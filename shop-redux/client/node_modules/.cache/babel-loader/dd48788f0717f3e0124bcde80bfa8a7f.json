{"ast":null,"code":"var _jsxFileName = \"/Users/yussefrafat/Desktop/STATETEST/shop-shop-shop-redux/client/src/components/CategoryMenu/index.js\";\nimport React, { useEffect } from 'react';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\"; // Provider Global Store import\n// commented out in favor of redux logic\n//import { useStoreContext } from \"../../utils/GlobalState\";\n\nimport { useDispatch, useSelector } from 'react-redux'; // Import IndexDB helper which will allow the app to talk\n// to the database\n\nimport { idbPromise } from '../../utils/helpers'; // setCategory  was used before adding our handleclick\n//function CategoryMenu({ setCategory }) {\n// therefore it can be removed from the prop as we are using the \n// global sate\n\nfunction CategoryMenu({}) {\n  // Before migrating to use global Store\n  //const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n  //const categories = categoryData?.categories || [];\n  // commented out in favor of redux logic\n  //const [state, dispatch] = useStoreContext();\n  const state = useSelector(state => {\n    return state;\n  });\n  const dispatch = useDispatch();\n  const {\n    categories\n  } = state; // loading will be used for offline capabilities\n\n  const {\n    loading,\n    data: categoryData\n  } = useQuery(QUERY_CATEGORIES);\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      }); // also add to indexDB\n\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      console.log(\"I am offline\");\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [loading, categoryData, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  }; // on click before global state was setCategory(item._id);\n  // now is handleClick(item._id);\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, \"Choose a Category:\"), categories.map(item => /*#__PURE__*/React.createElement(\"button\", {\n    key: item._id,\n    onClick: () => {\n      handleClick(item._id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, item.name)));\n}\n\nexport default CategoryMenu;","map":{"version":3,"sources":["/Users/yussefrafat/Desktop/STATETEST/shop-shop-shop-redux/client/src/components/CategoryMenu/index.js"],"names":["React","useEffect","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","useQuery","QUERY_CATEGORIES","useDispatch","useSelector","idbPromise","CategoryMenu","state","dispatch","categories","loading","data","categoryData","type","forEach","category","console","log","then","handleClick","id","currentCategory","map","item","_id","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,iBAAT,EAA4BC,uBAA5B,QAA2D,qBAA3D;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,gBAAT,QAAiC,qBAAjC,C,CAEA;AACA;AACA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CAEA;AACA;;AACA,SAASC,UAAT,QAA2B,qBAA3B,C,CAEA;AACA;AACA;AACA;;AAEA,SAASC,YAAT,CAAsB,EAAtB,EAA0B;AACxB;AACA;AACA;AAEA;AACA;AACA,QAAMC,KAAK,GAAGH,WAAW,CAAEG,KAAD,IAAW;AACnC,WAAOA,KAAP;AACD,GAFwB,CAAzB;AAGA,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AAEA,QAAM;AAAEM,IAAAA;AAAF,MAAiBF,KAAvB,CAZwB,CAaxB;;AACA,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAEC;AAAjB,MAAkCX,QAAQ,CAACC,gBAAD,CAAhD;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIc,YAAJ,EAAkB;AAChB;AACAJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEd,iBADC;AAEPU,QAAAA,UAAU,EAAEG,YAAY,CAACH;AAFlB,OAAD,CAAR,CAFgB,CAMhB;;AACAG,MAAAA,YAAY,CAACH,UAAb,CAAwBK,OAAxB,CAAgCC,QAAQ,IAAI;AAC1CV,QAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,EAAsBU,QAAtB,CAAV;AACD,OAFD;AAGD,KAVD,MAUO,IAAI,CAACL,OAAL,EAAc;AACnBM,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAZ,MAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,CAAV,CAAgCa,IAAhC,CAAqCT,UAAU,IAAI;AACjDD,QAAAA,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAAEd,iBADC;AAEPU,UAAAA,UAAU,EAAEA;AAFL,SAAD,CAAR;AAID,OALD;AAOD;AACF,GAtBQ,EAsBN,CAACC,OAAD,EAAUE,YAAV,EAAwBJ,QAAxB,CAtBM,CAAT;;AAwBA,QAAMW,WAAW,GAAGC,EAAE,IAAI;AACxBZ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEb,uBADC;AAEPqB,MAAAA,eAAe,EAAED;AAFV,KAAD,CAAR;AAID,GALD,CAxCwB,CA+CxB;AACA;;;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEGX,UAAU,CAACa,GAAX,CAAeC,IAAI,iBAClB;AACE,IAAA,GAAG,EAAEA,IAAI,CAACC,GADZ;AAEE,IAAA,OAAO,EAAE,MAAM;AACbL,MAAAA,WAAW,CAACI,IAAI,CAACC,GAAN,CAAX;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGD,IAAI,CAACE,IANR,CADD,CAFH,CADF;AAeD;;AAED,eAAenB,YAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\n\n// Provider Global Store import\n// commented out in favor of redux logic\n//import { useStoreContext } from \"../../utils/GlobalState\";\nimport { useDispatch, useSelector } from 'react-redux';\n\n// Import IndexDB helper which will allow the app to talk\n// to the database\nimport { idbPromise } from '../../utils/helpers';\n\n// setCategory  was used before adding our handleclick\n//function CategoryMenu({ setCategory }) {\n// therefore it can be removed from the prop as we are using the \n// global sate\n\nfunction CategoryMenu({}) {\n  // Before migrating to use global Store\n  //const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n  //const categories = categoryData?.categories || [];\n\n  // commented out in favor of redux logic\n  //const [state, dispatch] = useStoreContext();\n  const state = useSelector((state) => {\n    return state\n  });\n  const dispatch = useDispatch();\n\n  const { categories } = state;\n  // loading will be used for offline capabilities\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      // also add to indexDB\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      console.log(\"I am offline\")\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n\n    }\n  }, [loading, categoryData, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  // on click before global state was setCategory(item._id);\n  // now is handleClick(item._id);\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n"]},"metadata":{},"sourceType":"module"}