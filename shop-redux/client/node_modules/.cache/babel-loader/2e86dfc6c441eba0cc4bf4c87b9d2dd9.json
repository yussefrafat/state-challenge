{"ast":null,"code":"// commented out in favor of redux logic\n//import { useReducer } from 'react';\n// actions to take\nimport { UPDATE_PRODUCTS, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, ADD_TO_CART, ADD_MULTIPLE_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, CLEAR_CART, TOGGLE_CART } from './actions';\nconst defaultState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: ''\n};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n    case UPDATE_PRODUCTS:\n      return { ...state,\n        products: [...action.products]\n      };\n    // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n\n    case UPDATE_CATEGORIES:\n      return { ...state,\n        categories: [...action.categories]\n      };\n    // if action type value is the value of `UPDATE_CURRENT_CATEGORY`, return a new string instead of an array\n\n    case UPDATE_CURRENT_CATEGORY:\n      return { ...state,\n        currentCategory: action.currentCategory\n      };\n    // UI Cart case\n\n    case ADD_TO_CART:\n      return { ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n    // add multiple to cart\n\n    case ADD_MULTIPLE_TO_CART:\n      return { ...state,\n        cart: [...state.cart, ...action.products]\n      };\n    // Remove from cart\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n      return { ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return { ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n\n          return product;\n        })\n      };\n\n    case CLEAR_CART:\n      return { ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return { ...state,\n        cartOpen: !state.cartOpen\n      };\n    // if no changes, leave as default values\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer; // commented out in favor of redux logic\n// export function useProductReducer(initialState) {\n//   return useReducer(reducer, initialState);\n// }","map":{"version":3,"sources":["/Users/yussefrafat/Desktop/STATETEST/shop-shop-shop-redux/client/src/utils/reducers.js"],"names":["UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","defaultState","products","cart","cartOpen","categories","currentCategory","reducer","state","action","type","product","newState","filter","_id","length","map","purchaseQuantity"],"mappings":"AAAA;AACA;AAEA;AACA,SACEA,eADF,EAEEC,iBAFF,EAGEC,uBAHF,EAIEC,WAJF,EAKEC,oBALF,EAMEC,gBANF,EAOEC,oBAPF,EAQEC,UARF,EASEC,WATF,QAUO,WAVP;AAYA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,QAAQ,EAAE,KAHS;AAInBC,EAAAA,UAAU,EAAE,EAJO;AAKnBC,EAAAA,eAAe,EAAE;AALE,CAArB;;AAQE,MAAMC,OAAO,GAAG,CAACC,KAAK,GAACP,YAAP,EAAqBQ,MAArB,KAAgC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI;AACA,SAAKlB,eAAL;AACI,aAAO,EACP,GAAGgB,KADI;AAEPN,QAAAA,QAAQ,EAAE,CAAC,GAAGO,MAAM,CAACP,QAAX;AAFH,OAAP;AAIJ;;AACA,SAAKT,iBAAL;AACI,aAAO,EACP,GAAGe,KADI;AAEPH,QAAAA,UAAU,EAAE,CAAC,GAAGI,MAAM,CAACJ,UAAX;AAFL,OAAP;AAIJ;;AACA,SAAKX,uBAAL;AACI,aAAO,EACH,GAAGc,KADA;AAEHF,QAAAA,eAAe,EAAEG,MAAM,CAACH;AAFrB,OAAP;AAIJ;;AACA,SAAKX,WAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELJ,QAAAA,QAAQ,EAAE,IAFL;AAGLD,QAAAA,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAV,EAAgBM,MAAM,CAACE,OAAvB;AAHD,OAAP;AAKF;;AACA,SAAKf,oBAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELL,QAAAA,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAV,EAAgB,GAAGM,MAAM,CAACP,QAA1B;AAFD,OAAP;AAIF;;AACA,SAAKL,gBAAL;AACE,UAAIe,QAAQ,GAAGJ,KAAK,CAACL,IAAN,CAAWU,MAAX,CAAkBF,OAAO,IAAI;AAC1C,eAAOA,OAAO,CAACG,GAAR,KAAgBL,MAAM,CAACK,GAA9B;AACD,OAFc,CAAf;AAIA,aAAO,EACL,GAAGN,KADE;AAELJ,QAAAA,QAAQ,EAAEQ,QAAQ,CAACG,MAAT,GAAkB,CAFvB;AAGLZ,QAAAA,IAAI,EAAES;AAHD,OAAP;;AAKF,SAAKd,oBAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELJ,QAAAA,QAAQ,EAAE,IAFL;AAGLD,QAAAA,IAAI,EAAEK,KAAK,CAACL,IAAN,CAAWa,GAAX,CAAeL,OAAO,IAAI;AAC9B,cAAIF,MAAM,CAACK,GAAP,KAAeH,OAAO,CAACG,GAA3B,EAAgC;AAC9BH,YAAAA,OAAO,CAACM,gBAAR,GAA2BR,MAAM,CAACQ,gBAAlC;AACD;;AACD,iBAAON,OAAP;AACD,SALK;AAHD,OAAP;;AAWF,SAAKZ,UAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELJ,QAAAA,QAAQ,EAAE,KAFL;AAGLD,QAAAA,IAAI,EAAE;AAHD,OAAP;;AAMF,SAAKH,WAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELJ,QAAAA,QAAQ,EAAE,CAACI,KAAK,CAACJ;AAFZ,OAAP;AAKA;;AACJ;AACE,aAAOI,KAAP;AAtEJ;AAwED,CAzED;;AA4EA,eAAeD,OAAf,C,CAEA;AACA;AACA;AACA","sourcesContent":["// commented out in favor of redux logic\n//import { useReducer } from 'react';\n\n// actions to take\nimport {\n  UPDATE_PRODUCTS,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  ADD_TO_CART,\n  ADD_MULTIPLE_TO_CART,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from './actions';\n\nconst defaultState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: '',\n}\n  \n  const reducer = (state=defaultState, action) => {\n    switch (action.type) {\n        // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS:\n            return {\n            ...state,\n            products: [...action.products]\n            };\n        // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n        case UPDATE_CATEGORIES:\n            return {\n            ...state,\n            categories: [...action.categories]\n            };\n        // if action type value is the value of `UPDATE_CURRENT_CATEGORY`, return a new string instead of an array\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n        // UI Cart case\n        case ADD_TO_CART:\n          return {\n            ...state,\n            cartOpen: true,\n            cart: [...state.cart, action.product]\n          };\n        // add multiple to cart\n        case ADD_MULTIPLE_TO_CART:\n          return {\n            ...state,\n            cart: [...state.cart, ...action.products],\n          };\n        // Remove from cart\n        case REMOVE_FROM_CART:\n          let newState = state.cart.filter(product => {\n            return product._id !== action._id;\n          });\n        \n          return {\n            ...state,\n            cartOpen: newState.length > 0,\n            cart: newState\n          };\n        case UPDATE_CART_QUANTITY:\n          return {\n            ...state,\n            cartOpen: true,\n            cart: state.cart.map(product => {\n              if (action._id === product._id) {\n                product.purchaseQuantity = action.purchaseQuantity;\n              }\n              return product;\n            })\n          };\n\n        case CLEAR_CART:\n          return {\n            ...state,\n            cartOpen: false,\n            cart: []\n          };\n        \n        case TOGGLE_CART:\n          return {\n            ...state,\n            cartOpen: !state.cartOpen\n          };\n  \n          // if no changes, leave as default values\n      default:\n        return state;\n    }\n  };\n\n\n  export default reducer;\n\n  // commented out in favor of redux logic\n  // export function useProductReducer(initialState) {\n  //   return useReducer(reducer, initialState);\n  // }"]},"metadata":{},"sourceType":"module"}